# -*- coding: utf-8 -*-
"""heartproject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EU9y8O3wrdozPH0VtS39ZPbf0bihSdvY
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("heart.csv")
df.head()

df.columns

print(df.columns.tolist())

print(df.columns)

df['HeartDisease'].value_counts()

print(df.info())
print(df.isnull().sum())

df.isnull().sum()
df = df.dropna()
df.isnull().sum()

import matplotlib.pyplot as plt
import seaborn as sns


# Age vs Heart Disease
sns.histplot(data=df, x='Age', hue='HeartDisease', multiple='stack')
plt.title("Age vs Heart Disease")
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

# Features & target
X = df.drop('HeartDisease', axis=1)
y = df['HeartDisease']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model train
model = RandomForestClassifier()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Results
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

# 1. Dataset already loaded & cleaned
# Agar df me data loaded hai, warna uncomment karke load karo:
# df = pd.read_csv("heart.csv")

print("Dataset shape:", df.shape)
print("\nFirst 5 rows:\n", df.head())

# 2. Basic stats
print("\nSummary:\n", df.describe())

# 3. Distribution plots
plt.figure(figsize=(12, 6))
sns.countplot(x='HeartDisease', data=df)
plt.title('Heart Disease Count')
plt.show()

# 4. Correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.show()

# 5. Model training
X = df.drop('HeartDisease', axis=1)
y = df['HeartDisease']

# Handle categorical variables
X = pd.get_dummies(X, drop_first=True)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# 6. Evaluation
print("\nAccuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

df.dtypes

# Columns jinko encode karna hai
cols_to_encode = ['Sex', 'ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope']

# Har column ko label encode karna
le = LabelEncoder()
for col in cols_to_encode:
    df[col] = le.fit_transform(df[col])

# Changes check karne ke liye
print(df.head())
print(df.dtypes)

X = df.drop('HeartDisease', axis=1)  # Features
y = df['HeartDisease']               # Target

print("Feature(X):")
print(X.head())

print("/ntarget(y):")
print(y.head())

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

new_data = [[45, 1, 120, 240, 0, 1, 150, 0, 1.2, 2, 1]]  # Example values
print("Prediction (0 = No Heart Disease, 1 = Heart Disease):", model.predict(new_data))

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# ✅ Prediction
y_pred = model.predict(X_test)

# ✅ Accuracy
acc = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {acc:.2f}")

# ✅ Classification Report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# ✅ Confusion Matrix
cm = confusion_matrix(y_test, y_pred)

# ✅ Plot Confusion Matrix
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["No Heart Disease", "Heart Disease"], yticklabels=["No Heart Disease", "Heart Disease"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# ✅ Accuracy Bar Graph
plt.figure(figsize=(4, 3))
plt.bar(["Accuracy"], [acc], color="green")
plt.ylim(0, 1)
plt.title("Model Accuracy")
plt.ylabel("Accuracy Score")
plt.show()

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# ✅ Predictions
y_pred = model.predict(X_test)

# ✅ Short Report
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print("----- Model Short Report -----")
print(f"Accuracy : {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall   : {recall:.2f}")
print(f"F1-Score : {f1:.2f}")
print("--------------------------------")

df.to_csv("heart_cleaned.csv",index=False)

